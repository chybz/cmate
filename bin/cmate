#!/usr/bin/env -S cmake -P
# -*- CMake -*-

set(CMATE "cmate")
set(CMATE_VER "X.Y.Z")
set(CMATE_CONF "cmate.json")
set(CMATE_TARGETS "")
set(CMATE_CMDS "")
cmake_policy(SET CMP0057 NEW)

## BEGIN CMATE INCLUDES
if(CMAKE_SCRIPT_MODE_FILE AND NOT CMAKE_PARENT_LIST_FILE)
    cmake_path(GET CMAKE_SCRIPT_MODE_FILE PARENT_PATH CMATE_DIR)
    cmake_path(GET CMATE_DIR PARENT_PATH CMATE_DIR)
    cmake_path(APPEND CMATE_DIR "lib" OUTPUT_VARIABLE CMATE_LIB_DIR)
    list(PREPEND CMAKE_MODULE_PATH ${CMATE_LIB_DIR})

    include(cmate/utilities)
    include(cmate/deps)
    include(cmate/args)
    include(cmate/commands/configure)
    include(cmate/commands/reconfigure)
    include(cmate/commands/build)
    include(cmate/commands/rebuild)
    include(cmate/commands/stage)
    include(cmate/commands/clean)
    include(cmate/commands/help)
endif()
## END CMATE INCLUDES

##############################################################################
#
# Target common functions
#
##############################################################################
function(cmate_target_link_deps NAME DEPS_FILE VAR)
    cmate_load_link_deps(${DEPS_FILE} TGT)

    if(${TGT_DEPS_COUNT} GREATER 0)
        set(TDEPS "\ntarget_link_libraries(\n    ${NAME}")

        foreach(TYPE PUBLIC PRIVATE)
            if(${TGT_${TYPE}_DEPS_COUNT} GREATER 0)
                string(APPEND TDEPS "\n    ${TYPE}")

                foreach(DEP ${TGT_${TYPE}_DEPS})
                    string(APPEND TDEPS "\n        ${DEP}")
                endforeach()
            endif()
        endforeach()

        string(APPEND TDEPS "\n)\n")
        set(${VAR} ${TDEPS} PARENT_SCOPE)
    endif()
endfunction()

function(cmate_target_name NAME TYPE VAR)
    string(TOLOWER "${CMATE_NAMESPACE}_${NAME}_${TYPE}" TBASE)
    string(REPLACE "-" "_" TBASE ${TBASE})
    set(${VAR} ${TBASE} PARENT_SCOPE)
endfunction()

##############################################################################
#
# Configuration functions
#
##############################################################################
function(cmate_set_defaults)
    get_filename_component(DIR "." ABSOLUTE)
    cmate_setg(CMATE_ROOT_DIR ${DIR})
    cmake_path(GET DIR FILENAME PROJECT)

    get_filename_component(DIR ".cmate" ABSOLUTE)
    cmate_setg(CMATE_DIR ${DIR})
    cmate_setg(CMATE_STATE_DIR "${CMATE_ROOT_DIR}/.cmate/state")
    cmate_setg(CMATE_TOOLCHAINS_DIR "${CMATE_ROOT_DIR}/.cmate/toolchains")

    cmate_setg(CMATE_PROJECT ${PROJECT})
    cmate_setg(CMATE_HEADER_PAT "*.hpp")
    cmate_setg(CMATE_SOURCE_PAT "*.[ch]pp")

    cmate_setg(CMATE_CMADE_ENV "${CMATE_ROOT_DIR}/.cmade/env")
endfunction()

##############################################################################
#
# Command processing
#
##############################################################################
function(cmate_process_cmd)
    if (CMATE_CMD STREQUAL "version")
        message(${CMATE_VERSION})
    elseif (CMATE_CMD)
        set(CMATE_COMMAND "cmate_${CMATE_CMD}")

        if(COMMAND "${CMATE_COMMAND}")
            cmake_language(CALL ${CMATE_COMMAND})
        else()
            cmate_msg("unknown command: ${CMATE_CMD}")
        endif()
    else()
        cmate_msg("no command")
    endif()
endfunction()

##############################################################################
#
# Main part
#
##############################################################################
if(CMAKE_SCRIPT_MODE_FILE)
    cmate_set_defaults()
    cmate_parse_arguments()
    cmate_load_conf("${CMATE_ROOT_DIR}/${CMATE_CONF}")
    cmate_process_cmd()
endif()
